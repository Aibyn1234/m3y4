from logic import DB_Manager
from config import *
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telebot import types

bot = TeleBot(TOKEN)
hideBoard = types.ReplyKeyboardRemove()

cancel_button = "–û—Ç–º–µ–Ω–∞ üö´"
def cansel(message):
    bot.send_message(message.chat.id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π - /info", reply_markup=hideBoard)

def no_projects(message):
    bot.send_message(message.chat.id, 'üìù –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤!\n–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /new_project')

def gen_inline_markup(rows):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    for row in rows:
        markup.add(InlineKeyboardButton(row, callback_data=row))
    return markup

def gen_markup(rows):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.row_width = 1
    for row in rows:
        markup.add(KeyboardButton(row))
    markup.add(KeyboardButton(cancel_button))
    return markup

attributes_of_projects = {
    '–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞': ["‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞", "project_name"],
    "–û–ø–∏—Å–∞–Ω–∏–µ": ["üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "description"],
    "–°—Å—ã–ª–∫–∞": ["üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç", "url"],
    "–°—Ç–∞—Ç—É—Å": ["üìà –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞", "status_id"]
}

def info_project(message, user_id, project_name):
    info = manager.get_project_info(user_id, project_name)[0]
    skills = manager.get_project_skills(project_name)
    skills = ', '.join(skills) if skills else '‚ùå –ù–∞–≤—ã–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã'
    bot.send_message(message.chat.id, f"""
üìÅ {info[0]}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {info[1]}
üîó –°—Å—ã–ª–∫–∞: {info[2]}
üìà –°—Ç–∞—Ç—É—Å: {info[3]}
üß† –ù–∞–≤—ã–∫–∏: {skills}
""", reply_markup=hideBoard)

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, 
"""üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ ü§ñ
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:
üìå –•—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö
üìà –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
üéØ –£–ª—É—á—à–∞—Ç—å –Ω–∞–≤—ã–∫–∏

–í–≤–µ–¥–∏ /info —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é! üöÄ
""")
    info(message)

@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id,
"""üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

üÜï /new_project ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç (–∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∞, —Å—Ç–∞—Ç—É—Å)

üìã /projects ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π

üí° /skills ‚Äî –¥–æ–±–∞–≤—å –Ω–∞–≤—ã–∫ –∫ –ø—Ä–æ–µ–∫—Ç—É

‚ùå /delete ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç (—É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–µ!)

üîÑ /update_projects ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Å—ã–ª–∫—É –∏–ª–∏ —Å—Ç–∞—Ç—É—Å

‚ÑπÔ∏è /info ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üëã /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è

üîö –î–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞ üö´'
""")

@bot.message_handler(commands=['new_project'])
def addtask_command(message):
    bot.send_message(message.chat.id, "üÜï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(message, name_project)

def name_project(message):
    name = message.text
    user_id = message.from_user.id
    data = [user_id, name]
    bot.send_message(message.chat.id, "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(message, description_project, data=data)

def description_project(message, data):
    data.append(message.text)
    bot.send_message(message.chat.id, "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç:")
    bot.register_next_step_handler(message, link_project, data=data)

def link_project(message, data):
    data.append(message.text)
    statuses = [x[0] for x in manager.get_statuses()]
    bot.send_message(message.chat.id, "üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=gen_markup(statuses))
    bot.register_next_step_handler(message, callback_project, data=data, statuses=statuses)

def callback_project(message, data, statuses):
    status = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if status not in statuses:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!", reply_markup=gen_markup(statuses))
        bot.register_next_step_handler(message, callback_project, data=data, statuses=statuses)
        return
    status_id = manager.get_status_id(status)
    data.append(status_id)
    manager.insert_project([tuple(data)])
    bot.send_message(message.chat.id, '‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!', reply_markup=hideBoard)

@bot.message_handler(commands=['skills'])
def skill_handler(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, 'üß† –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫:', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, skill_project, projects=projects)
    else:
        no_projects(message)

def skill_project(message, projects):
    project_name = message.text
    if project_name == cancel_button:
        cansel(message)
        return
    if project_name not in projects:
        bot.send_message(message.chat.id, '‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, skill_project, projects=projects)
        return
    skills = [x[1] for x in manager.get_skills()]
    bot.send_message(message.chat.id, 'üß† –í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫:', reply_markup=gen_markup(skills))
    bot.register_next_step_handler(message, set_skill, project_name=project_name, skills=skills)

def set_skill(message, project_name, skills):
    skill = message.text
    user_id = message.from_user.id
    if skill == cancel_button:
        cansel(message)
        return
    if skill not in skills:
        bot.send_message(message.chat.id, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∞–≤—ã–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:', reply_markup=gen_markup(skills))
        bot.register_next_step_handler(message, set_skill, project_name=project_name, skills=skills)
        return
    manager.insert_skill(user_id, project_name, skill)
    bot.send_message(message.chat.id, f'‚úÖ –ù–∞–≤—ã–∫ {skill} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø—Ä–æ–µ–∫—Ç—É {project_name}!', reply_markup=hideBoard)

@bot.message_handler(commands=['projects'])
def get_projects(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        text = "\n\n".join([f"üìÅ {x[2]}\nüîó {x[4]}" for x in projects])
        bot.send_message(message.chat.id, text, reply_markup=gen_inline_markup([x[2] for x in projects]))
    else:
        no_projects(message)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    project_name = call.data
    info_project(call.message, call.from_user.id, project_name)

@bot.message_handler(commands=['delete'])
def delete_handler(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        text = "\n\n".join([f"üóëÔ∏è {x[2]}\nüîó {x[4]}" for x in projects])
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, text, reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, delete_project, projects=projects)
    else:
        no_projects(message)

def delete_project(message, projects):
    project = message.text
    user_id = message.from_user.id
    if project == cancel_button:
        cansel(message)
        return
    if project not in projects:
        bot.send_message(message.chat.id, '‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, delete_project, projects=projects)
        return
    project_id = manager.get_project_id(project, user_id)
    manager.delete_project(user_id, project_id)
    bot.send_message(message.chat.id, f'üóëÔ∏è –ü—Ä–æ–µ–∫—Ç {project} —É–¥–∞–ª—ë–Ω!', reply_markup=hideBoard)

@bot.message_handler(commands=['update_projects'])
def update_project(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, "üîß –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, update_project_step_2, projects=projects)
    else:
        no_projects(message)

def update_project_step_2(message, projects):
    project_name = message.text
    if project_name == cancel_button:
        cansel(message)
        return
    if project_name not in projects:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:", reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, update_project_step_2, projects=projects)
        return
    bot.send_message(message.chat.id, "üîß –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=gen_markup(attributes_of_projects.keys()))
    bot.register_next_step_handler(message, update_project_step_3, project_name=project_name)

def update_project_step_3(message, project_name):
    attribute = message.text
    reply_markup = None
    if attribute == cancel_button:
        cansel(message)
        return
    if attribute not in attributes_of_projects:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:", reply_markup=gen_markup(attributes_of_projects.keys()))
        bot.register_next_step_handler(message, update_project_step_3, project_name=project_name)
        return
    if attribute == "–°—Ç–∞—Ç—É—Å":
        rows = manager.get_statuses()
        reply_markup = gen_markup([x[0] for x in rows])
    bot.send_message(message.chat.id, attributes_of_projects[attribute][0], reply_markup=reply_markup)
    bot.register_next_step_handler(message, update_project_step_4, project_name=project_name, attribute=attributes_of_projects[attribute][1])

def update_project_step_4(message, project_name, attribute):
    update_info = message.text
    if update_info == cancel_button:
        cansel(message)
        return
    if attribute == "status_id":
        rows = manager.get_statuses()
        if update_info not in [x[0] for x in rows]:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:", reply_markup=gen_markup([x[0] for x in rows]))
            bot.register_next_step_handler(message, update_project_step_4, project_name=project_name, attribute=attribute)
            return
        update_info = manager.get_status_id(update_info)
    user_id = message.from_user.id
    data = (update_info, project_name, user_id)
    manager.update_projects(attribute, data)
    bot.send_message(message.chat.id, "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=hideBoard)

@bot.message_handler(func=lambda message: True)
def text_handler(message):
    user_id = message.from_user.id
    projects = [x[2] for x in manager.get_projects(user_id)]
    project = message.text
    if project in projects:
        info_project(message, user_id, project)
    else:
        bot.reply_to(message, "ü§ñ –¢–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
        info(message)

if __name__ == '__main__':
    manager = DB_Manager(DATABASE)
    bot.infinity_polling()
